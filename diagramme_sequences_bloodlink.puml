@startuml Diagramme de S√©quences - BloodLink

!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60
skinparam participant {
    BackgroundColor #E3F2FD
    BorderColor #1976D2
}
skinparam actor {
    BackgroundColor #FFF3E0
    BorderColor #F57C00
}
skinparam database {
    BackgroundColor #E8F5E8
    BorderColor #388E3C
}

title **Diagramme de S√©quences - Application BloodLink**\n*Plateforme de Gestion de Banques de Sang*

actor "üë§ Donneur" as Donor #FF9800
actor "üè• Admin Banque" as BankAdmin #2196F3
actor "‚ö° Super Admin" as SuperAdmin #9C27B0

participant "üåê Interface Web\n(Laravel Blade)" as UI #4CAF50
participant "üîê AuthController" as Auth #FF5722
participant "üìÖ AppointmentController" as AppointmentCtrl #3F51B5
participant "ü©∏ DonationController" as DonationCtrl #E91E63
participant "üó∫Ô∏è BloodBankMapController" as MapCtrl #00BCD4
participant "üîî NotificationService" as NotifService #FFC107
participant "üìß EmailService" as EmailService #795548

participant "üë§ User Model" as UserModel #607D8B
participant "ü©∫ Donor Model" as DonorModel #8BC34A
participant "üìã Appointment Model" as AppointmentModel #FF9800
participant "ü©∏ Donation Model" as DonationModel #F44336
participant "üè• Bank Model" as BankModel #2196F3
participant "üì¶ BloodStock Model" as StockModel #9C27B0
participant "ü©∏ BloodType Model" as BloodTypeModel #E91E63

database "üóÑÔ∏è Base de Donn√©es\n(MySQL)" as DB #4CAF50

== üîê **Processus d'Authentification** ==

note over Donor, Auth : **√âtape 1: Connexion utilisateur**
Donor -> UI: Acc√®s √† la page de connexion
UI -> Auth: showLoginForm()
Auth -> UI: Afficher formulaire de connexion
UI -> Donor: Formulaire de connexion

note over Donor, Auth : **√âtape 2: Validation des identifiants**
Donor -> UI: Saisir identifiants (email/password)
UI -> Auth: login(credentials)
Auth -> UserModel: V√©rifier identifiants
UserModel -> DB: SELECT * FROM users WHERE email = ? AND status = 'active'
DB -> UserModel: Donn√©es utilisateur
UserModel -> Auth: Utilisateur authentifi√©

note over Auth, UI : **√âtape 3: Redirection selon le r√¥le**
Auth -> UI: Redirection vers dashboard
UI -> Donor: Dashboard donneur

== üìÖ **Processus de Prise de Rendez-vous** ==

note over Donor, AppointmentCtrl : **√âtape 1: Acc√®s au formulaire**
Donor -> UI: Acc√®s √† "Prendre Rendez-vous"
UI -> AppointmentCtrl: create()
AppointmentCtrl -> BankModel: R√©cup√©rer banques actives
BankModel -> DB: SELECT * FROM banks WHERE status = 'active'
DB -> BankModel: Liste des banques
BankModel -> AppointmentCtrl: Banques disponibles
AppointmentCtrl -> UI: Formulaire de rendez-vous
UI -> Donor: Formulaire avec banques

note over Donor, AppointmentCtrl : **√âtape 2: Validation et cr√©ation**
Donor -> UI: Remplir formulaire (banque, date, heure)
UI -> AppointmentCtrl: store(appointmentData)

note over AppointmentCtrl, DonorModel : **Validation du profil donneur**
AppointmentCtrl -> DonorModel: V√©rifier profil donneur
DonorModel -> DB: SELECT * FROM donors WHERE user_id = ?
DB -> DonorModel: Profil donneur
DonorModel -> AppointmentCtrl: Profil trouv√©

note over AppointmentCtrl, BankModel : **Validation de la banque**
AppointmentCtrl -> BankModel: V√©rifier disponibilit√© banque
BankModel -> DB: SELECT * FROM banks WHERE id = ? AND status = 'active'
DB -> BankModel: D√©tails banque
BankModel -> AppointmentCtrl: Banque disponible

note over AppointmentCtrl, AppointmentModel : **V√©rification des conflits**
AppointmentCtrl -> AppointmentModel: V√©rifier conflit de rendez-vous
AppointmentModel -> DB: SELECT * FROM appointments WHERE donor_id = ? AND appointment_date = ?
DB -> AppointmentModel: Rendez-vous existants
AppointmentModel -> AppointmentCtrl: Aucun conflit

note over AppointmentCtrl, AppointmentModel : **Cr√©ation du rendez-vous**
AppointmentCtrl -> AppointmentModel: create(appointmentData)
AppointmentModel -> DB: INSERT INTO appointments (donor_id, bank_id, appointment_date, status)
DB -> AppointmentModel: Rendez-vous cr√©√©
AppointmentModel -> AppointmentCtrl: Rendez-vous enregistr√©

note over AppointmentCtrl, UI : **Confirmation**
AppointmentCtrl -> UI: Redirection avec succ√®s
UI -> Donor: Confirmation de cr√©ation

== üè• **Processus de Gestion des Rendez-vous (Admin)** ==

note over BankAdmin, AppointmentCtrl : **√âtape 1: Consultation des rendez-vous**
BankAdmin -> UI: Acc√®s √† la liste des rendez-vous
UI -> AppointmentCtrl: index()
AppointmentCtrl -> BankModel: R√©cup√©rer banque de l'admin
BankModel -> DB: SELECT * FROM banks WHERE admin_id = ?
DB -> BankModel: Banque de l'admin
BankModel -> AppointmentCtrl: Banque identifi√©e

AppointmentCtrl -> AppointmentModel: R√©cup√©rer rendez-vous de la banque
AppointmentModel -> DB: SELECT * FROM appointments WHERE bank_id = ? ORDER BY appointment_date
DB -> AppointmentModel: Liste des rendez-vous
AppointmentModel -> AppointmentCtrl: Rendez-vous r√©cup√©r√©s
AppointmentCtrl -> UI: Liste des rendez-vous
UI -> BankAdmin: Interface de gestion

note over BankAdmin, AppointmentCtrl : **√âtape 2: Confirmation d'un rendez-vous**
BankAdmin -> UI: Confirmer un rendez-vous
UI -> AppointmentCtrl: confirm(appointmentId)
AppointmentCtrl -> AppointmentModel: update(status = 'confirmed')
AppointmentModel -> DB: UPDATE appointments SET status = 'confirmed', confirmed_at = NOW()
DB -> AppointmentModel: Rendez-vous confirm√©
AppointmentModel -> AppointmentCtrl: Confirmation effectu√©e

note over AppointmentCtrl, NotifService : **Envoi de notification**
AppointmentCtrl -> NotifService: appointmentConfirmed(appointment)
NotifService -> DB: INSERT INTO notifications (user_id, title, message, type)
DB -> NotifService: Notification cr√©√©e
NotifService -> AppointmentCtrl: Notification envoy√©e
AppointmentCtrl -> UI: Redirection avec succ√®s
UI -> BankAdmin: Confirmation de l'action

== ü©∏ **Processus de Don de Sang** ==

note over BankAdmin, AppointmentCtrl : **√âtape 1: Enregistrement du don**
BankAdmin -> UI: Marquer rendez-vous comme termin√©
UI -> AppointmentCtrl: complete(appointmentId, volume)

note over AppointmentCtrl, DonorModel : **R√©cup√©ration des donn√©es donneur**
AppointmentCtrl -> DonorModel: R√©cup√©rer groupe sanguin
DonorModel -> DB: SELECT blood_type_id FROM donors WHERE id = ?
DB -> DonorModel: Groupe sanguin
DonorModel -> AppointmentCtrl: Groupe sanguin r√©cup√©r√©

note over AppointmentCtrl, DonationModel : **Cr√©ation du don**
AppointmentCtrl -> DonationModel: create(donationData)
DonationModel -> DB: INSERT INTO donations (appointment_id, donor_id, bank_id, blood_type_id, volume, quantity, status)
DB -> DonationModel: Don cr√©√©
DonationModel -> AppointmentCtrl: Don enregistr√©

note over AppointmentCtrl, StockModel : **Mise √† jour du stock**
AppointmentCtrl -> StockModel: Mettre √† jour stock
StockModel -> DB: SELECT * FROM blood_stocks WHERE bank_id = ? AND blood_type_id = ?
DB -> StockModel: Stock existant
StockModel -> DB: UPDATE blood_stocks SET quantity = quantity + ?
DB -> StockModel: Stock mis √† jour
StockModel -> AppointmentCtrl: Stock actualis√©

note over AppointmentCtrl, AppointmentModel : **Finalisation du rendez-vous**
AppointmentCtrl -> AppointmentModel: update(status = 'completed')
AppointmentModel -> DB: UPDATE appointments SET status = 'completed', completed_at = NOW()
DB -> AppointmentModel: Rendez-vous termin√©
AppointmentModel -> AppointmentCtrl: Rendez-vous marqu√© comme termin√©
AppointmentCtrl -> UI: Redirection avec succ√®s
UI -> BankAdmin: Confirmation de don enregistr√©

== ü©∏ **Processus de Gestion des Dons** ==

note over BankAdmin, DonationCtrl : **√âtape 1: Consultation des dons**
BankAdmin -> UI: Acc√®s √† la gestion des dons
UI -> DonationCtrl: index()
DonationCtrl -> BankModel: R√©cup√©rer banque de l'admin
BankModel -> DonationCtrl: Banque identifi√©e
DonationCtrl -> DonationModel: R√©cup√©rer dons de la banque
DonationModel -> DB: SELECT * FROM donations WHERE bank_id = ? ORDER BY donation_date DESC
DB -> DonationModel: Liste des dons
DonationModel -> DonationCtrl: Dons r√©cup√©r√©s
DonationCtrl -> UI: Liste des dons
UI -> BankAdmin: Interface de gestion des dons

note over BankAdmin, DonationCtrl : **√âtape 2: Traitement d'un don**
BankAdmin -> UI: Marquer don comme trait√©
UI -> DonationCtrl: process(donationId)
DonationCtrl -> DonationModel: update(status = 'processed')
DonationModel -> DB: UPDATE donations SET status = 'processed', processed_at = NOW()
DB -> DonationModel: Don trait√©
DonationModel -> DonationCtrl: Traitement effectu√©

note over DonationCtrl, NotifService : **Notification de traitement**
DonationCtrl -> NotifService: donationProcessed(donation)
NotifService -> DB: INSERT INTO notifications (user_id, title, message, type)
DB -> NotifService: Notification cr√©√©e
NotifService -> DonationCtrl: Notification envoy√©e
DonationCtrl -> UI: Redirection avec succ√®s
UI -> BankAdmin: Confirmation de traitement

note over BankAdmin, DonationCtrl : **√âtape 3: Mise √† disposition**
BankAdmin -> UI: Rendre don disponible
UI -> DonationCtrl: makeAvailable(donationId)
DonationCtrl -> DonationModel: update(status = 'available')
DonationModel -> DB: UPDATE donations SET status = 'available', available_at = NOW()
DB -> DonationModel: Don disponible
DonationModel -> DonationCtrl: Disponibilit√© effectu√©e

note over DonationCtrl, NotifService : **Notification de disponibilit√©**
DonationCtrl -> NotifService: donationAvailable(donation)
NotifService -> DB: INSERT INTO notifications (user_id, title, message, type)
DB -> NotifService: Notification cr√©√©e
NotifService -> DonationCtrl: Notification envoy√©e
DonationCtrl -> UI: Redirection avec succ√®s
UI -> BankAdmin: Confirmation de disponibilit√©

== üó∫Ô∏è **Processus de Consultation de la Carte** ==

note over Donor, MapCtrl : **√âtape 1: Affichage de la carte**
Donor -> UI: Acc√®s √† la carte des banques
UI -> MapCtrl: index()
MapCtrl -> BankModel: R√©cup√©rer toutes les banques
BankModel -> DB: SELECT * FROM banks WHERE status = 'active'
DB -> BankModel: Liste des banques
BankModel -> MapCtrl: Banques r√©cup√©r√©es
MapCtrl -> UI: Donn√©es pour la carte
UI -> Donor: Carte interactive

note over Donor, MapCtrl : **√âtape 2: Recherche par proximit√©**
Donor -> UI: Rechercher banques √† proximit√©
UI -> MapCtrl: nearby(latitude, longitude)
MapCtrl -> BankModel: Calculer distances
BankModel -> DB: SELECT *, ST_Distance_Sphere(point(longitude, latitude), point(?, ?)) as distance FROM banks WHERE status = 'active'
DB -> BankModel: Toutes les banques avec distances
BankModel -> MapCtrl: Banques avec distances
MapCtrl -> UI: Banques tri√©es par proximit√©
UI -> Donor: R√©sultats de recherche

note over Donor, MapCtrl : **√âtape 3: Filtrage par groupe sanguin**
Donor -> UI: Filtrer par groupe sanguin
UI -> MapCtrl: filterByBloodType(bloodTypeId)
MapCtrl -> StockModel: R√©cup√©rer stocks par groupe sanguin
StockModel -> DB: SELECT * FROM blood_stocks WHERE blood_type_id = ? AND quantity > 0
DB -> StockModel: Stocks du groupe sanguin
StockModel -> MapCtrl: Stocks r√©cup√©r√©s
MapCtrl -> BankModel: R√©cup√©rer banques avec stock
BankModel -> DB: SELECT * FROM banks WHERE id IN (SELECT bank_id FROM blood_stocks WHERE blood_type_id = ? AND quantity > 0)
DB -> BankModel: Banques avec stock
BankModel -> MapCtrl: Banques filtr√©es
MapCtrl -> UI: Banques avec disponibilit√©
UI -> Donor: R√©sultats filtr√©s

== üë§ **Processus de Consultation du Profil Donneur** ==

note over Donor, DonorModel : **√âtape 1: Acc√®s au profil**
Donor -> UI: Acc√®s au profil
UI -> DonorCtrl: profile()
DonorCtrl -> DonorModel: R√©cup√©rer profil complet
DonorModel -> DB: SELECT * FROM donors WHERE user_id = ?
DB -> DonorModel: Profil donneur
DonorModel -> DonorCtrl: Profil r√©cup√©r√©
DonorCtrl -> UI: Donn√©es du profil
UI -> Donor: Page de profil

note over Donor, DonationCtrl : **√âtape 2: Historique des dons**
Donor -> UI: Consulter historique des dons
UI -> DonationCtrl: index()
DonationCtrl -> DonorModel: R√©cup√©rer dons du donneur
DonorModel -> DB: SELECT * FROM donations WHERE donor_id = ? ORDER BY donation_date DESC
DB -> DonorModel: Historique des dons
DonorModel -> DonationCtrl: Dons r√©cup√©r√©s
DonationCtrl -> UI: Liste des dons
UI -> Donor: Historique des dons

== üîî **Processus de Gestion des Notifications** ==

note over Donor, NotifService : **√âtape 1: Consultation des notifications**
Donor -> UI: Consulter notifications
UI -> NotificationCtrl: index()
NotificationCtrl -> UserModel: R√©cup√©rer notifications utilisateur
UserModel -> DB: SELECT * FROM notifications WHERE user_id = ? ORDER BY created_at DESC
DB -> UserModel: Notifications
UserModel -> NotificationCtrl: Notifications r√©cup√©r√©es
NotificationCtrl -> UI: Liste des notifications
UI -> Donor: Interface des notifications

note over Donor, NotificationCtrl : **√âtape 2: Marquage comme lue**
Donor -> UI: Marquer notification comme lue
UI -> NotificationCtrl: markAsRead(notificationId)
NotificationCtrl -> DB: UPDATE notifications SET read_at = NOW() WHERE id = ?
DB -> NotificationCtrl: Notification marqu√©e comme lue
NotificationCtrl -> UI: Confirmation
UI -> Donor: Notification mise √† jour

== üìä **Processus de Rapports (Super Admin)** ==

note over SuperAdmin, ReportCtrl : **√âtape 1: G√©n√©ration de rapports**
SuperAdmin -> UI: Acc√®s aux rapports
UI -> ReportCtrl: index()
ReportCtrl -> DonationModel: Statistiques globales
DonationModel -> DB: SELECT COUNT(*), SUM(volume) FROM donations
DB -> DonationModel: Statistiques dons
ReportCtrl -> BankModel: Statistiques banques
BankModel -> DB: SELECT COUNT(*) FROM banks WHERE status = 'active'
DB -> BankModel: Statistiques banques
ReportCtrl -> UI: Donn√©es des rapports
UI -> SuperAdmin: Interface des rapports

note over SuperAdmin, ReportCtrl : **√âtape 2: Export des donn√©es**
SuperAdmin -> UI: Exporter rapport
UI -> ReportCtrl: export(format)
ReportCtrl -> DonationModel: R√©cup√©rer donn√©es
DonationModel -> DB: SELECT * FROM donations WHERE created_at >= ?
DB -> DonationModel: Donn√©es pour export
ReportCtrl -> UI: Fichier d'export
UI -> SuperAdmin: T√©l√©chargement du rapport

@enduml
